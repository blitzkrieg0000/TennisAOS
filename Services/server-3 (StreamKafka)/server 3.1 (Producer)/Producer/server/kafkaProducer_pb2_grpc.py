# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import kafkaProducer_pb2 as kafkaProducer__pb2


class kafkaProducerStub(object):
    """Service
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.producer = channel.unary_stream(
                '/producer.kafkaProducer/producer',
                request_serializer=kafkaProducer__pb2.producerRequest.SerializeToString,
                response_deserializer=kafkaProducer__pb2.producerResponse.FromString,
                )
        self.getAllProducerProcesses = channel.unary_unary(
                '/producer.kafkaProducer/getAllProducerProcesses',
                request_serializer=kafkaProducer__pb2.getAllProducerProcessesRequest.SerializeToString,
                response_deserializer=kafkaProducer__pb2.getAllProducerProcessesResponse.FromString,
                )
        self.stopProducer = channel.unary_unary(
                '/producer.kafkaProducer/stopProducer',
                request_serializer=kafkaProducer__pb2.stopProducerRequest.SerializeToString,
                response_deserializer=kafkaProducer__pb2.stopProducerResponse.FromString,
                )
        self.stopAllProducerProcesses = channel.unary_unary(
                '/producer.kafkaProducer/stopAllProducerProcesses',
                request_serializer=kafkaProducer__pb2.stopAllProducerProcessesRequest.SerializeToString,
                response_deserializer=kafkaProducer__pb2.stopAllProducerProcessesResponse.FromString,
                )


class kafkaProducerServicer(object):
    """Service
    """

    def producer(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getAllProducerProcesses(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def stopProducer(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def stopAllProducerProcesses(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_kafkaProducerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'producer': grpc.unary_stream_rpc_method_handler(
                    servicer.producer,
                    request_deserializer=kafkaProducer__pb2.producerRequest.FromString,
                    response_serializer=kafkaProducer__pb2.producerResponse.SerializeToString,
            ),
            'getAllProducerProcesses': grpc.unary_unary_rpc_method_handler(
                    servicer.getAllProducerProcesses,
                    request_deserializer=kafkaProducer__pb2.getAllProducerProcessesRequest.FromString,
                    response_serializer=kafkaProducer__pb2.getAllProducerProcessesResponse.SerializeToString,
            ),
            'stopProducer': grpc.unary_unary_rpc_method_handler(
                    servicer.stopProducer,
                    request_deserializer=kafkaProducer__pb2.stopProducerRequest.FromString,
                    response_serializer=kafkaProducer__pb2.stopProducerResponse.SerializeToString,
            ),
            'stopAllProducerProcesses': grpc.unary_unary_rpc_method_handler(
                    servicer.stopAllProducerProcesses,
                    request_deserializer=kafkaProducer__pb2.stopAllProducerProcessesRequest.FromString,
                    response_serializer=kafkaProducer__pb2.stopAllProducerProcessesResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'producer.kafkaProducer', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class kafkaProducer(object):
    """Service
    """

    @staticmethod
    def producer(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/producer.kafkaProducer/producer',
            kafkaProducer__pb2.producerRequest.SerializeToString,
            kafkaProducer__pb2.producerResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getAllProducerProcesses(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/producer.kafkaProducer/getAllProducerProcesses',
            kafkaProducer__pb2.getAllProducerProcessesRequest.SerializeToString,
            kafkaProducer__pb2.getAllProducerProcessesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def stopProducer(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/producer.kafkaProducer/stopProducer',
            kafkaProducer__pb2.stopProducerRequest.SerializeToString,
            kafkaProducer__pb2.stopProducerResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def stopAllProducerProcesses(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/producer.kafkaProducer/stopAllProducerProcesses',
            kafkaProducer__pb2.stopAllProducerProcessesRequest.SerializeToString,
            kafkaProducer__pb2.stopAllProducerProcessesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
