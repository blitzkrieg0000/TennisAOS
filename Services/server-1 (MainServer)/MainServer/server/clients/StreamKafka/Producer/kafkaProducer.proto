syntax = "proto3";
package producer;


// Service
service kafkaProducer {
  rpc producer(stream ProducerRequest) returns (stream ProducerResponse) {}
  rpc getAllProducerProcesses(getAllProducerProcessesRequest) returns (getAllProducerProcessesResponse) {}
  rpc stopProducer(stopProducerRequest) returns (stopProducerResponse) {}
  rpc stopAllProducerProcesses(stopAllProducerProcessesRequest) returns (stopAllProducerProcessesResponse) {}
}

// COMPONENTS
message Response{
  enum ResponseCodes{
    SUCCESS = 0;
    WARNING = 1;
    ERROR = 2;
    INFO = 3;
    NULL = 4;
    NOT_FOUND = 5;
    REQUIRED = 6;
    UNSUFFICIENT = 7;
    CONNECTION_ERROR = 8;
 }
  ResponseCodes Code = 1;
  string Message=2;
  bytes Data=3;
}


// Request Name
message ProducerRequest {
  string TopicName=1;
  string Source=2;
  bool IsVideo=3;
  int64 Limit=4;
  int64 ErrorLimit=5;
  bool Independent=6;
}
message getAllProducerProcessesRequest{
  bytes data=1;
}
message stopProducerRequest {
  bytes process_name=1;
}
message stopAllProducerProcessesRequest{
  bytes data=1;
}



// Response Array
message ProducerResponse{
  Response Response=1;
}
message getAllProducerProcessesResponse{
  bytes data=1;
}
message stopProducerResponse {
  bytes result=1;
}
message stopAllProducerProcessesResponse{
  bytes result=1;
}