# Generated by the Services Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import mainRouterServer_pb2 as mainRouterServer__pb2


class mainRouterServerStub(object):
    """Service
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.detectCourtLinesController = channel.unary_unary(
                '/stream.mainRouterServer/detectCourtLinesController',
                request_serializer=mainRouterServer__pb2.detectCourtLinesRequestData.SerializeToString,
                response_deserializer=mainRouterServer__pb2.LinesResponseData.FromString,
                )
        self.gameObservationController = channel.unary_unary(
                '/stream.mainRouterServer/gameObservationController',
                request_serializer=mainRouterServer__pb2.gameObservationRequestData.SerializeToString,
                response_deserializer=mainRouterServer__pb2.gameObservationControllerResponse.FromString,
                )
        self.getProducerThreads = channel.unary_unary(
                '/stream.mainRouterServer/getProducerThreads',
                request_serializer=mainRouterServer__pb2.requestData.SerializeToString,
                response_deserializer=mainRouterServer__pb2.responseData.FromString,
                )
        self.stopProduce = channel.unary_unary(
                '/stream.mainRouterServer/stopProduce',
                request_serializer=mainRouterServer__pb2.requestData.SerializeToString,
                response_deserializer=mainRouterServer__pb2.responseData.FromString,
                )
        self.stopAllProducerThreads = channel.unary_unary(
                '/stream.mainRouterServer/stopAllProducerThreads',
                request_serializer=mainRouterServer__pb2.requestData.SerializeToString,
                response_deserializer=mainRouterServer__pb2.responseData.FromString,
                )
        self.getRunningConsumers = channel.unary_unary(
                '/stream.mainRouterServer/getRunningConsumers',
                request_serializer=mainRouterServer__pb2.requestData.SerializeToString,
                response_deserializer=mainRouterServer__pb2.responseData.FromString,
                )
        self.stopRunningConsumer = channel.unary_unary(
                '/stream.mainRouterServer/stopRunningConsumer',
                request_serializer=mainRouterServer__pb2.requestData.SerializeToString,
                response_deserializer=mainRouterServer__pb2.responseData.FromString,
                )
        self.stopAllRunningConsumers = channel.unary_unary(
                '/stream.mainRouterServer/stopAllRunningConsumers',
                request_serializer=mainRouterServer__pb2.requestData.SerializeToString,
                response_deserializer=mainRouterServer__pb2.responseData.FromString,
                )


class mainRouterServerServicer(object):
    """Service
    """

    def detectCourtLinesController(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def gameObservationController(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getProducerThreads(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def stopProduce(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def stopAllProducerThreads(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getRunningConsumers(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def stopRunningConsumer(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def stopAllRunningConsumers(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_mainRouterServerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'detectCourtLinesController': grpc.unary_unary_rpc_method_handler(
                    servicer.detectCourtLinesController,
                    request_deserializer=mainRouterServer__pb2.detectCourtLinesRequestData.FromString,
                    response_serializer=mainRouterServer__pb2.LinesResponseData.SerializeToString,
            ),
            'gameObservationController': grpc.unary_unary_rpc_method_handler(
                    servicer.gameObservationController,
                    request_deserializer=mainRouterServer__pb2.gameObservationRequestData.FromString,
                    response_serializer=mainRouterServer__pb2.gameObservationControllerResponse.SerializeToString,
            ),
            'getProducerThreads': grpc.unary_unary_rpc_method_handler(
                    servicer.getProducerThreads,
                    request_deserializer=mainRouterServer__pb2.requestData.FromString,
                    response_serializer=mainRouterServer__pb2.responseData.SerializeToString,
            ),
            'stopProduce': grpc.unary_unary_rpc_method_handler(
                    servicer.stopProduce,
                    request_deserializer=mainRouterServer__pb2.requestData.FromString,
                    response_serializer=mainRouterServer__pb2.responseData.SerializeToString,
            ),
            'stopAllProducerThreads': grpc.unary_unary_rpc_method_handler(
                    servicer.stopAllProducerThreads,
                    request_deserializer=mainRouterServer__pb2.requestData.FromString,
                    response_serializer=mainRouterServer__pb2.responseData.SerializeToString,
            ),
            'getRunningConsumers': grpc.unary_unary_rpc_method_handler(
                    servicer.getRunningConsumers,
                    request_deserializer=mainRouterServer__pb2.requestData.FromString,
                    response_serializer=mainRouterServer__pb2.responseData.SerializeToString,
            ),
            'stopRunningConsumer': grpc.unary_unary_rpc_method_handler(
                    servicer.stopRunningConsumer,
                    request_deserializer=mainRouterServer__pb2.requestData.FromString,
                    response_serializer=mainRouterServer__pb2.responseData.SerializeToString,
            ),
            'stopAllRunningConsumers': grpc.unary_unary_rpc_method_handler(
                    servicer.stopAllRunningConsumers,
                    request_deserializer=mainRouterServer__pb2.requestData.FromString,
                    response_serializer=mainRouterServer__pb2.responseData.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'stream.mainRouterServer', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class mainRouterServer(object):
    """Service
    """

    @staticmethod
    def detectCourtLinesController(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/stream.mainRouterServer/detectCourtLinesController',
            mainRouterServer__pb2.detectCourtLinesRequestData.SerializeToString,
            mainRouterServer__pb2.LinesResponseData.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def gameObservationController(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/stream.mainRouterServer/gameObservationController',
            mainRouterServer__pb2.gameObservationRequestData.SerializeToString,
            mainRouterServer__pb2.gameObservationControllerResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getProducerThreads(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/stream.mainRouterServer/getProducerThreads',
            mainRouterServer__pb2.requestData.SerializeToString,
            mainRouterServer__pb2.responseData.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def stopProduce(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/stream.mainRouterServer/stopProduce',
            mainRouterServer__pb2.requestData.SerializeToString,
            mainRouterServer__pb2.responseData.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def stopAllProducerThreads(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/stream.mainRouterServer/stopAllProducerThreads',
            mainRouterServer__pb2.requestData.SerializeToString,
            mainRouterServer__pb2.responseData.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getRunningConsumers(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/stream.mainRouterServer/getRunningConsumers',
            mainRouterServer__pb2.requestData.SerializeToString,
            mainRouterServer__pb2.responseData.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def stopRunningConsumer(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/stream.mainRouterServer/stopRunningConsumer',
            mainRouterServer__pb2.requestData.SerializeToString,
            mainRouterServer__pb2.responseData.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def stopAllRunningConsumers(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/stream.mainRouterServer/stopAllRunningConsumers',
            mainRouterServer__pb2.requestData.SerializeToString,
            mainRouterServer__pb2.responseData.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
