# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import redisCache_pb2 as redisCache__pb2


class redisCacheStub(object):
    """Service
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.writeCache = channel.unary_unary(
                '/producer.redisCache/writeCache',
                request_serializer=redisCache__pb2.writeCacheRequest.SerializeToString,
                response_deserializer=redisCache__pb2.writeCacheResponse.FromString,
                )
        self.isCached = channel.unary_unary(
                '/producer.redisCache/isCached',
                request_serializer=redisCache__pb2.isCachedDataRequest.SerializeToString,
                response_deserializer=redisCache__pb2.isCachedResponse.FromString,
                )
        self.readCache = channel.unary_unary(
                '/producer.redisCache/readCache',
                request_serializer=redisCache__pb2.readCacheDataRequest.SerializeToString,
                response_deserializer=redisCache__pb2.readCacheResponse.FromString,
                )


class redisCacheServicer(object):
    """Service
    """

    def writeCache(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def isCached(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def readCache(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_redisCacheServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'writeCache': grpc.unary_unary_rpc_method_handler(
                    servicer.writeCache,
                    request_deserializer=redisCache__pb2.writeCacheRequest.FromString,
                    response_serializer=redisCache__pb2.writeCacheResponse.SerializeToString,
            ),
            'isCached': grpc.unary_unary_rpc_method_handler(
                    servicer.isCached,
                    request_deserializer=redisCache__pb2.isCachedDataRequest.FromString,
                    response_serializer=redisCache__pb2.isCachedResponse.SerializeToString,
            ),
            'readCache': grpc.unary_unary_rpc_method_handler(
                    servicer.readCache,
                    request_deserializer=redisCache__pb2.readCacheDataRequest.FromString,
                    response_serializer=redisCache__pb2.readCacheResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'producer.redisCache', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class redisCache(object):
    """Service
    """

    @staticmethod
    def writeCache(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/producer.redisCache/writeCache',
            redisCache__pb2.writeCacheRequest.SerializeToString,
            redisCache__pb2.writeCacheResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def isCached(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/producer.redisCache/isCached',
            redisCache__pb2.isCachedDataRequest.SerializeToString,
            redisCache__pb2.isCachedResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def readCache(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/producer.redisCache/readCache',
            redisCache__pb2.readCacheDataRequest.SerializeToString,
            redisCache__pb2.readCacheResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
