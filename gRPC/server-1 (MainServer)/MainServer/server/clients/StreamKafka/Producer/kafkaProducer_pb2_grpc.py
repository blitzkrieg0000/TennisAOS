# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import clients.StreamKafka.Producer.kafkaProducer_pb2 as kafkaProducer__pb2


class kafkaProducerStub(object):
    """Service
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.producer = channel.unary_unary(
                '/producer.kafkaProducer/producer',
                request_serializer=kafkaProducer__pb2.producerRequest.SerializeToString,
                response_deserializer=kafkaProducer__pb2.producerResponse.FromString,
                )
        self.stopProduce = channel.unary_unary(
                '/producer.kafkaProducer/stopProduce',
                request_serializer=kafkaProducer__pb2.stopProduceRequest.SerializeToString,
                response_deserializer=kafkaProducer__pb2.stopProduceResponse.FromString,
                )
        self.getProducerThreads = channel.unary_unary(
                '/producer.kafkaProducer/getProducerThreads',
                request_serializer=kafkaProducer__pb2.getProducerThreadsRequest.SerializeToString,
                response_deserializer=kafkaProducer__pb2.getProducerThreadsResponse.FromString,
                )
        self.stopAllProducerThreads = channel.unary_unary(
                '/producer.kafkaProducer/stopAllProducerThreads',
                request_serializer=kafkaProducer__pb2.getProducerThreadsRequest.SerializeToString,
                response_deserializer=kafkaProducer__pb2.getProducerThreadsResponse.FromString,
                )
        self.deleteTopics = channel.unary_unary(
                '/producer.kafkaProducer/deleteTopics',
                request_serializer=kafkaProducer__pb2.deleteTopicsRequest.SerializeToString,
                response_deserializer=kafkaProducer__pb2.deleteTopicsResponse.FromString,
                )


class kafkaProducerServicer(object):
    """Service
    """

    def producer(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def stopProduce(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getProducerThreads(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def stopAllProducerThreads(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def deleteTopics(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_kafkaProducerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'producer': grpc.unary_unary_rpc_method_handler(
                    servicer.producer,
                    request_deserializer=kafkaProducer__pb2.producerRequest.FromString,
                    response_serializer=kafkaProducer__pb2.producerResponse.SerializeToString,
            ),
            'stopProduce': grpc.unary_unary_rpc_method_handler(
                    servicer.stopProduce,
                    request_deserializer=kafkaProducer__pb2.stopProduceRequest.FromString,
                    response_serializer=kafkaProducer__pb2.stopProduceResponse.SerializeToString,
            ),
            'getProducerThreads': grpc.unary_unary_rpc_method_handler(
                    servicer.getProducerThreads,
                    request_deserializer=kafkaProducer__pb2.getProducerThreadsRequest.FromString,
                    response_serializer=kafkaProducer__pb2.getProducerThreadsResponse.SerializeToString,
            ),
            'stopAllProducerThreads': grpc.unary_unary_rpc_method_handler(
                    servicer.stopAllProducerThreads,
                    request_deserializer=kafkaProducer__pb2.getProducerThreadsRequest.FromString,
                    response_serializer=kafkaProducer__pb2.getProducerThreadsResponse.SerializeToString,
            ),
            'deleteTopics': grpc.unary_unary_rpc_method_handler(
                    servicer.deleteTopics,
                    request_deserializer=kafkaProducer__pb2.deleteTopicsRequest.FromString,
                    response_serializer=kafkaProducer__pb2.deleteTopicsResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'producer.kafkaProducer', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class kafkaProducer(object):
    """Service
    """

    @staticmethod
    def producer(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/producer.kafkaProducer/producer',
            kafkaProducer__pb2.producerRequest.SerializeToString,
            kafkaProducer__pb2.producerResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def stopProduce(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/producer.kafkaProducer/stopProduce',
            kafkaProducer__pb2.stopProduceRequest.SerializeToString,
            kafkaProducer__pb2.stopProduceResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getProducerThreads(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/producer.kafkaProducer/getProducerThreads',
            kafkaProducer__pb2.getProducerThreadsRequest.SerializeToString,
            kafkaProducer__pb2.getProducerThreadsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def stopAllProducerThreads(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/producer.kafkaProducer/stopAllProducerThreads',
            kafkaProducer__pb2.getProducerThreadsRequest.SerializeToString,
            kafkaProducer__pb2.getProducerThreadsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def deleteTopics(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/producer.kafkaProducer/deleteTopics',
            kafkaProducer__pb2.deleteTopicsRequest.SerializeToString,
            kafkaProducer__pb2.deleteTopicsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
