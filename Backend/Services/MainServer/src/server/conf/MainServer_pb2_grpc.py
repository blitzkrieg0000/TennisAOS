# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import conf.MainServer_pb2 as MainServer__pb2


class MainServerStub(object):
    """Service
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.StartProcess = channel.unary_stream(
                '/main.MainServer/StartProcess',
                request_serializer=MainServer__pb2.StartProcessRequestData.SerializeToString,
                response_deserializer=MainServer__pb2.StartProcessResponseData.FromString,
                )
        self.StopProcess = channel.unary_unary(
                '/main.MainServer/StopProcess',
                request_serializer=MainServer__pb2.StopProcessRequestData.SerializeToString,
                response_deserializer=MainServer__pb2.StopProcessResponseData.FromString,
                )
        self.MergeData = channel.unary_unary(
                '/main.MainServer/MergeData',
                request_serializer=MainServer__pb2.MergeDataRequestData.SerializeToString,
                response_deserializer=MainServer__pb2.MergeDataResponseData.FromString,
                )


class MainServerServicer(object):
    """Service
    """

    def StartProcess(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StopProcess(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def MergeData(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MainServerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'StartProcess': grpc.unary_stream_rpc_method_handler(
                    servicer.StartProcess,
                    request_deserializer=MainServer__pb2.StartProcessRequestData.FromString,
                    response_serializer=MainServer__pb2.StartProcessResponseData.SerializeToString,
            ),
            'StopProcess': grpc.unary_unary_rpc_method_handler(
                    servicer.StopProcess,
                    request_deserializer=MainServer__pb2.StopProcessRequestData.FromString,
                    response_serializer=MainServer__pb2.StopProcessResponseData.SerializeToString,
            ),
            'MergeData': grpc.unary_unary_rpc_method_handler(
                    servicer.MergeData,
                    request_deserializer=MainServer__pb2.MergeDataRequestData.FromString,
                    response_serializer=MainServer__pb2.MergeDataResponseData.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'main.MainServer', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class MainServer(object):
    """Service
    """

    @staticmethod
    def StartProcess(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/main.MainServer/StartProcess',
            MainServer__pb2.StartProcessRequestData.SerializeToString,
            MainServer__pb2.StartProcessResponseData.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def StopProcess(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/main.MainServer/StopProcess',
            MainServer__pb2.StopProcessRequestData.SerializeToString,
            MainServer__pb2.StopProcessResponseData.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def MergeData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/main.MainServer/MergeData',
            MainServer__pb2.MergeDataRequestData.SerializeToString,
            MainServer__pb2.MergeDataResponseData.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
