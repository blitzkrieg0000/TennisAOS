# Generated by the Services Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import clients.TrackBall.trackBall_pb2 as trackBall__pb2


class trackBallStub(object):
    """Service
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.findTennisBallPosition = channel.unary_unary(
                '/cache.trackBall/findTennisBallPosition',
                request_serializer=trackBall__pb2.trackBallRequest.SerializeToString,
                response_deserializer=trackBall__pb2.trackBallResponse.FromString,
                )
        self.deleteDetector = channel.unary_unary(
                '/cache.trackBall/deleteDetector',
                request_serializer=trackBall__pb2.deleteDetectorRequest.SerializeToString,
                response_deserializer=trackBall__pb2.deleteDetectorResponse.FromString,
                )


class trackBallServicer(object):
    """Service
    """

    def findTennisBallPosition(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def deleteDetector(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_trackBallServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'findTennisBallPosition': grpc.unary_unary_rpc_method_handler(
                    servicer.findTennisBallPosition,
                    request_deserializer=trackBall__pb2.trackBallRequest.FromString,
                    response_serializer=trackBall__pb2.trackBallResponse.SerializeToString,
            ),
            'deleteDetector': grpc.unary_unary_rpc_method_handler(
                    servicer.deleteDetector,
                    request_deserializer=trackBall__pb2.deleteDetectorRequest.FromString,
                    response_serializer=trackBall__pb2.deleteDetectorResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'cache.trackBall', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class trackBall(object):
    """Service
    """

    @staticmethod
    def findTennisBallPosition(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cache.trackBall/findTennisBallPosition',
            trackBall__pb2.trackBallRequest.SerializeToString,
            trackBall__pb2.trackBallResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def deleteDetector(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cache.trackBall/deleteDetector',
            trackBall__pb2.deleteDetectorRequest.SerializeToString,
            trackBall__pb2.deleteDetectorResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
